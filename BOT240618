import ccxt
import pandas as pd
import numpy as np
import talib
import time
from datetime import datetime
from pybit.unified_trading import HTTP
# Configuration de l'API
exchange = ccxt.bybit()

# Configuration de l'API avec vos clés API Bybit
api_key = 
api_secret = 'WLbYobPrbhOWI2fsXjlQJtngy2h87G62MyJg'

session = HTTP(
    api_key=api_key,
    api_secret=api_secret,
)

# Liste des symboles de cryptomonnaies (par exemple, "BTC/USDT" pour le contrat BTC/USDT)

leverage = 1
amount = leverage*390
TP_buy = 1.01
SL_buy = 0.995
TP_sell = 0.99
SL_sell = 1.005

ema_length = 200
crypto = 'PEOPLEUSDT'
timeframe = '15m'

current_minute = 1
current_seconde = 0
# Récupération des données historiques
def get_ohlcv(symbol, timeframe, limit=1000):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

# Calcul des indicateurs techniques
def calculate_indicators(df):
    df['ema200'] = talib.EMA(df['close'], timeperiod=ema_length)
    return df

def signal_strategy(df): 
    last_row = df.iloc[-1]
    if last_row['close'] > last_row['ema200']:
        return 'buy'
    else: 
        return 'sell'
    
# Stratégie de trading
def trading_strategy(df, signal_startegy):
    last_row = df.iloc[-2]
    prev_row = df.iloc[-3]
    calculate_entrance = round((((last_row['high'] / last_row['low']) -1) *100 ), 2) 
    if signal_startegy == 'sell':
        if  calculate_entrance >= 1 and (last_row['close'] < prev_row['close']):
            return -1 #sell
        else: 
            return 0 #hold
    else: 
        if calculate_entrance >= 1  and (last_row['close'] > prev_row['close']):
            return 1 #buy
        else: 
            return 0 #hold

def take_position(amount,symbol,side, last_price,strategy):
    last_price = float(last_price)
    if strategy == 1: #Buy
        TP = str(round((last_price*TP_buy),5))
        SP = str(round((last_price*SL_buy),5))
    else: #Sell
        TP = str(round((last_price*TP_sell),5))
        SP = str(round((last_price*SL_sell),5))
    amount = str(amount)
    try:
        # Placer un ordre de marché pour acheter (long)
        order = session.place_order(
            category='linear',
            symbol=symbol,
            side=side,
            orderType='Market',
            qty=amount,
            takeProfit = TP,
            stopLoss = SP,
        )
        print(f"Order placed successfully: {order}")
        return order
    except Exception as e:
        print(f"An error occurred: {e}")
        return None


while (current_minute != 0 and current_minute != 15 and current_minute != 30 and current_minute != 45):
    now = datetime.now()
    current_minute = now.minute
    current_seconde = now.second

while True: 
    current_time = datetime.now()
    df = get_ohlcv(crypto, timeframe)
    df = calculate_indicators(df)
    actual_signal = signal_strategy(df)
    strategy = trading_strategy(df,actual_signal)
    last_close_price = df.iloc[-1]
    
    #buy signal
    if strategy == 1:
        print("buy")
        take_position(amount, crypto,side='Buy', last_price=last_close_price['close'], strategy=strategy)
    #sell signall
    elif strategy == -1:
        print("sell")
        take_position(amount, crypto,side='Sell', last_price=last_close_price['close'], strategy=strategy)
    else:
        None
    print(f"{current_time}")
    time.sleep(900)
